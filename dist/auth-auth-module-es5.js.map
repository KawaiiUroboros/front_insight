{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html"],"names":["routes","path","component","children","AuthRoutingModule","forChild","imports","exports","AuthComponent","selector","template","AuthModule","declarations","LoginComponent","server","router","isAuth","status","getUserStatus","IsAuthored","next","loginForm","login","required","password","incorrectData","e","user","username","target","value","getJwtToken","navigate","subscribe","resp","templateUrl","styleUrls"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { NbAuthComponent } from '@nebular/auth';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    // component: NbAuthComponent,\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"ngx-auth\",\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `,\r\n})\r\nexport class AuthComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\n// import { NbAuthModule, NbPasswordAuthStrategy } from \"@nebular/auth\";\r\n// import {\r\n//   NbAlertModule,\r\n//   NbButtonModule,\r\n//   NbCheckboxModule,\r\n//   NbInputModule,\r\n// } from \"@nebular/theme\";\r\n\r\nimport { AuthComponent } from \"./auth.component\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent, LoginComponent],\r\n  // bootstrap: [AuthComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n\r\n    // NbAlertModule,\r\n    // NbInputModule,\r\n    // NbButtonModule,\r\n    // NbCheckboxModule,\r\n\r\n    AuthRoutingModule,\r\n\r\n    // NbAuthModule.forRoot(),\r\n  ],\r\n})\r\nexport class AuthModule {}\r\n","import { Observable, Subscription } from \"rxjs\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ServerService } from \"./../../server.service\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { OnDestroy } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"ngx-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  isAuth: boolean = false;\r\n  constructor(private server: ServerService, private router: Router) {\r\n    let status = server.getUserStatus();\r\n    this.server.IsAuthored.next(status);\r\n    if (status) {\r\n      this.isAuth = status;\r\n    }\r\n  }\r\n\r\n  loginForm: FormGroup;\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      login: new FormControl(\"\", Validators.required),\r\n      password: new FormControl(\"\", Validators.required),\r\n    });\r\n  }\r\n\r\n  // ngOnDestroy(): void {\r\n  //   if(this.sub){ this.sub.unsubscribe() }\r\n  // }\r\n\r\n  onFocus() {\r\n    if (this.incorrectData) {\r\n      this.incorrectData = false;\r\n    }\r\n  }\r\n\r\n  // sub: Subscription;\r\n  incorrectData: boolean;\r\n  onSubmit(e: any) {\r\n    let user = {\r\n      username: e.target[0].value,\r\n      password: e.target[1].value,\r\n    };\r\n\r\n    if (this.server.getJwtToken()) {\r\n      this.router.navigate([\"pages/dashboard\"]);\r\n    } else {\r\n      this.server.login(user).subscribe((resp) => {\r\n        if (resp) {\r\n          this.router.navigate([\"pages/dashboard\"]);\r\n        } else {\r\n          this.incorrectData = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"card\" *ngIf=\"isAuth\">\r\n  <div class=\"card-body\">\r\n    <h1 class=\"card-title\">Вы уже авторизованы</h1>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"card\" *ngIf=\"!isAuth\">\r\n  <div class=\"card-body\">\r\n    <h5 class=\"card-title\">Авторизируйтесь</h5>\r\n    <form (submit)=\"onSubmit($event)\" [formGroup]=\"loginForm\">\r\n      <label\r\n        class=\"label\"\r\n        for=\"login\"\r\n        [ngClass]=\"{\r\n          'message-error':\r\n            (loginForm.get('login').invalid &&\r\n              loginForm.get('login').touched) ||\r\n            incorrectData\r\n        }\"\r\n        >Логин</label\r\n      >\r\n      <input\r\n        class=\"input\"\r\n        formControlName=\"login\"\r\n        id=\"login\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        aria-label=\"Sizing example input\"\r\n        aria-describedby=\"inputGroup-sizing-default\"\r\n        (focus)=\"onFocus()\"\r\n        [ngClass]=\"{\r\n          'message-error':\r\n            (loginForm.get('login').invalid &&\r\n              loginForm.get('login').touched) ||\r\n            incorrectData\r\n        }\"\r\n      />\r\n      <span\r\n        class=\"message-error\"\r\n        *ngIf=\"loginForm.get('login').invalid && loginForm.get('login').touched\"\r\n      >\r\n        <span *ngIf=\"loginForm.get('login').errors?.required\"\r\n          >Не введён логин</span\r\n        >\r\n      </span>\r\n      <span class=\"message-error\" *ngIf=\"incorrectData\"\r\n        >Некорректный логин или пароль</span\r\n      >\r\n\r\n      <label\r\n        class=\"label\"\r\n        for=\"password\"\r\n        [ngClass]=\"{\r\n          'message-error':\r\n            (loginForm.get('password').invalid &&\r\n              loginForm.get('password').touched) ||\r\n            incorrectData\r\n        }\"\r\n        >Пароль</label\r\n      >\r\n      <input\r\n        class=\"input\"\r\n        formControlName=\"password\"\r\n        id=\"password\"\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        aria-label=\"Sizing example input\"\r\n        aria-describedby=\"inputGroup-sizing-default\"\r\n        (focus)=\"onFocus()\"\r\n        [ngClass]=\"{\r\n          'message-error':\r\n            (loginForm.get('password').invalid &&\r\n              loginForm.get('password').touched) ||\r\n            incorrectData\r\n        }\"\r\n      />\r\n      <span\r\n        class=\"message-error\"\r\n        *ngIf=\"\r\n          (loginForm.get('password').invalid &&\r\n            loginForm.get('password').touched) ||\r\n          incorrectData\r\n        \"\r\n      >\r\n        <span *ngIf=\"loginForm.get('password').errors?.required\"\r\n          >Не введён пароль</span\r\n        >\r\n      </span>\r\n      <span class=\"message-error\" *ngIf=\"incorrectData\"\r\n        >Некорректный логин или пароль</span\r\n      >\r\n\r\n      <!-- <div class=\"field-remember\">\r\n        <input id=\"remember\" type=\"checkbox\" />\r\n        <label for=\"remember\">Запомнить меня</label>\r\n      </div> -->\r\n\r\n      <button\r\n        [disabled]=\"loginForm.invalid\"\r\n        type=\"submit\"\r\n        class=\"btn btn-primary btn-block\"\r\n      >\r\n        Войти\r\n      </button>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]}